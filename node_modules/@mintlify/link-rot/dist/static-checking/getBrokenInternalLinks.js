import fs from 'fs-extra';
import path from 'path';
import { remark } from 'remark';
import remarkFrontmatter from 'remark-frontmatter';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import remarkMdx from 'remark-mdx';
import { visit } from 'unist-util-visit';
import { Graph, Wrapper } from '../graph.js';
import { getLinkPaths, getPagePaths } from '../prebuild.js';
export const decorateGraphNodeFromPageContent = async (graphNode, content) => {
    const visitLinks = () => {
        return (tree) => {
            visit(tree, (node) => {
                if (
                // ![]() format
                node.type === 'link' ||
                    node.type === 'image') {
                    graphNode.addPath(node.url, Wrapper.MD);
                    return;
                }
                const mdxJsxFlowElement = node;
                if (mdxJsxFlowElement.name === 'img' || mdxJsxFlowElement.name === 'source') {
                    const srcAttrIndex = mdxJsxFlowElement.attributes.findIndex((attr) => attr.type === 'mdxJsxAttribute' && attr.name === 'src');
                    const nodeUrl = mdxJsxFlowElement.attributes[srcAttrIndex]?.value;
                    if (typeof nodeUrl === 'string') {
                        graphNode.addPath(nodeUrl, Wrapper.SRC);
                        return;
                    }
                }
                else if (mdxJsxFlowElement.name === 'a' || mdxJsxFlowElement.name === 'Card') {
                    const hrefAttrIndex = mdxJsxFlowElement.attributes.findIndex((attr) => attr.type === 'mdxJsxAttribute' && attr.name === 'href');
                    const nodeUrl = mdxJsxFlowElement.attributes[hrefAttrIndex]?.value;
                    if (typeof nodeUrl === 'string') {
                        graphNode.addPath(nodeUrl, Wrapper.HREF);
                        return;
                    }
                }
            });
            return tree;
        };
    };
    await remark()
        .use(remarkMdx)
        .use(remarkGfm)
        .use(remarkMath)
        .use(remarkFrontmatter, ['yaml', 'toml'])
        .use(visitLinks)
        .process(content);
    return;
};
/**
 * Get all broken internal links used in the site
 */
export const getBrokenInternalLinks = async () => {
    // TODO get proper baseDir even if user is in subfolder
    const baseDir = process.cwd();
    const graph = new Graph(baseDir);
    // add nodes for every page or media path in project
    const filenames = getLinkPaths(baseDir);
    graph.addNodes(filenames);
    // add nodes for every link alias in the project
    graph.addAliasNodes();
    const sitePages = getPagePaths(baseDir);
    await Promise.all(sitePages.map(async (filePath) => {
        const fileContent = fs.readFileSync(path.join(baseDir, filePath)).toString();
        await decorateGraphNodeFromPageContent(graph.getNode(filePath), fileContent);
    }));
    return graph.getBrokenInternalLinks();
};
