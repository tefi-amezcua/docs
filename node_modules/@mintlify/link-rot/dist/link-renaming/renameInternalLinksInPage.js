/**
 * @typedef {import('remark-mdx')}
 */
import fs from 'fs-extra';
import { normalize } from 'path';
import { remark } from 'remark';
import remarkFrontmatter from 'remark-frontmatter';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import remarkMdx from 'remark-mdx';
import { visit } from 'unist-util-visit';
/**
 * Go through fileContent and replace all links that match existingLink with newLink
 */
const getContentWithRenamedInternalLinks = async (fileContent, existingLink, newLink) => {
    let numRenamedLinks = 0;
    const remarkMdxReplaceLinks = () => {
        return (tree) => {
            visit(tree, (node) => {
                if ((node.type === 'link' || node.type === 'image') &&
                    node.url &&
                    normalize(node.url) === existingLink) {
                    node.url = newLink;
                    numRenamedLinks++;
                    return;
                }
                const mdxJsxFlowElement = node;
                if (mdxJsxFlowElement.name === 'img' || mdxJsxFlowElement.name === 'source') {
                    const srcAttrIndex = mdxJsxFlowElement.attributes.findIndex((attr) => attr.type === 'mdxJsxAttribute' && attr.name === 'src');
                    const nodeUrl = mdxJsxFlowElement.attributes[srcAttrIndex]?.value;
                    if (typeof nodeUrl === 'string' && normalize(nodeUrl) === existingLink) {
                        mdxJsxFlowElement.attributes[srcAttrIndex].value = newLink;
                        numRenamedLinks++;
                        return;
                    }
                }
                else if (mdxJsxFlowElement.name === 'a' || mdxJsxFlowElement.name === 'Card') {
                    const hrefAttrIndex = mdxJsxFlowElement.attributes.findIndex((attr) => attr.type === 'mdxJsxAttribute' && attr.name === 'href');
                    const nodeUrl = mdxJsxFlowElement.attributes[hrefAttrIndex]?.value;
                    if (typeof nodeUrl === 'string' && normalize(nodeUrl) === existingLink) {
                        mdxJsxFlowElement.attributes[hrefAttrIndex].value = newLink;
                        numRenamedLinks++;
                        return;
                    }
                }
                return;
            });
        };
    };
    const file = await remark()
        .use(remarkMdx)
        .use(remarkGfm)
        .use(remarkMath)
        .use(remarkFrontmatter, ['yaml', 'toml'])
        .use(remarkMdxReplaceLinks)
        .process(fileContent);
    return {
        numRenamedLinks,
        newContent: String(file),
    };
};
const renameInternalLinksInPage = async (filePath, oldLink, newLink) => {
    const fileContent = fs.readFileSync(filePath).toString();
    const { numRenamedLinks, newContent } = await getContentWithRenamedInternalLinks(fileContent, oldLink, newLink);
    if (numRenamedLinks > 0) {
        fs.outputFileSync(filePath, newContent, {
            flag: 'w',
        });
    }
    return numRenamedLinks;
};
export default renameInternalLinksInPage;
