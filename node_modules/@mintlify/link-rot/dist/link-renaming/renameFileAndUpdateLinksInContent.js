import { existsSync, renameSync } from 'fs';
import path from 'path';
import { removeFileExtension, getPagePaths, addLeadingSlash } from '../prebuild.js';
import renameInternalLinksInPage from './renameInternalLinksInPage.js';
/**
 * Renames a link in the file system. If the link is a directory, all links within the directory will be renamed as well.
 * @param oldFilePath - The existing directory or file to rename
 * @param newFilePath - The new directory or file name
 * @param force
 */
export const renameFilesAndUpdateLinksInContent = async (oldFilePathString, newFilePathString, force = false) => {
    const oldFilePath = path.parse(path.normalize(oldFilePathString));
    const newFilePath = path.parse(path.normalize(newFilePathString));
    if (oldFilePath.dir === newFilePath.dir && oldFilePath.base === newFilePath.base) {
        throw new Error('The old and new file paths are the same.');
    }
    else if (oldFilePath.ext !== newFilePath.ext) {
        if (force) {
            console.log('Warning: the file extensions are not the same.');
        }
        else {
            throw new Error('The file extensions are not the same. Use the --force flag to override.');
        }
    }
    // if the file or directory hasn't already been manually renamed, rename it
    if (existsSync(oldFilePathString)) {
        if (!force && existsSync(newFilePathString)) {
            throw new Error('The new file path already exists. Use the --force flag to overwrite it.');
        }
        renameSync(oldFilePathString, newFilePathString);
        console.log(`Renamed ${oldFilePathString} to ${newFilePathString}`);
    }
    else if (!force) {
        throw new Error('The old file path does not exist. Use the --force flag to skip the file system renaming.');
    }
    const oldLink = addLeadingSlash(removeFileExtension(oldFilePath));
    const newLink = addLeadingSlash(removeFileExtension(newFilePath));
    const pagesInDirectory = getPagePaths(process.cwd());
    const renameLinkPromises = [];
    for await (const filePath of pagesInDirectory) {
        renameLinkPromises.push((async () => {
            const numRenamedLinks = await renameInternalLinksInPage(path.join(process.cwd(), filePath), oldLink, newLink);
            if (numRenamedLinks > 0) {
                console.log(`Renamed ${numRenamedLinks} link(s) in ${filePath}`);
            }
        })());
    }
    await Promise.all(renameLinkPromises);
    return;
};
// renameFilesAndUpdateLinksInContent('/test/A.mdx', '/test/hello.mdx');
