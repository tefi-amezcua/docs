var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { getBrokenInternalLinks, renameFilesAndUpdateLinksInContent } from '@mintlify/link-rot';
import { dev, installDepsCommand } from '@mintlify/previewing';
import Chalk from 'chalk';
import path from 'path';
import shell from 'shelljs';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import { HOME_DIR } from './constants.js';
import { checkPortRecursive, promptForYarn, checkForMintJson } from './helpers.js';
export var cli = function () {
    return yargs(hideBin(process.argv))
        .command('dev', 'Runs Mintlify project locally.', function () { return undefined; }, function (argv) { return __awaiter(void 0, void 0, void 0, function () {
        var port;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, checkPortRecursive(argv)];
                case 1:
                    port = _a.sent();
                    shell.cd(HOME_DIR);
                    return [4 /*yield*/, promptForYarn()];
                case 2:
                    _a.sent();
                    if (!(port != undefined)) return [3 /*break*/, 4];
                    return [4 /*yield*/, dev(__assign(__assign({}, argv), { port: port }))];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    console.error("No available port found.");
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    }); })
        .command('install', 'Install local dependencies for Mintlify.', function () { return undefined; }, installDepsCommand)
        .command('broken-links', 'Check for broken links in your Mintlify project.', function () { return undefined; }, function () { return __awaiter(void 0, void 0, void 0, function () {
        var brokenLinks, brokenLinksByFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, checkForMintJson()];
                case 1:
                    _a.sent();
                    console.log(Chalk.bold('Checking for broken links...\n'));
                    return [4 /*yield*/, getBrokenInternalLinks()];
                case 2:
                    brokenLinks = _a.sent();
                    if (brokenLinks.length === 0) {
                        console.log(Chalk.green('No broken links found.'));
                        return [2 /*return*/];
                    }
                    brokenLinksByFile = {};
                    brokenLinks.forEach(function (mdxPath) {
                        var filename = path.join(mdxPath.relativeDir, mdxPath.filename);
                        if (brokenLinksByFile[filename]) {
                            brokenLinksByFile[filename].push(mdxPath.originalPath);
                        }
                        else {
                            brokenLinksByFile[filename] = [mdxPath.originalPath];
                        }
                    });
                    Object.entries(brokenLinksByFile).forEach(function (_a) {
                        var fileName = _a[0], brokenLinks = _a[1];
                        console.group("".concat(Chalk.underline(fileName)));
                        console.log(brokenLinks.join('\n'), '\n');
                        console.groupEnd();
                    });
                    console.error(Chalk.yellow("".concat(brokenLinks.length, " broken links found.")));
                    process.exit(1);
                    return [2 /*return*/];
            }
        });
    }); })
        .command('rename <from> <to>', 'Rename file in a Mintlify project and update the internal link references.', function (yargs) {
        return yargs
            .positional('from', {
            describe: 'The file to rename',
            type: 'string',
        })
            .positional('to', {
            describe: 'The new name for the file',
            type: 'string',
        })
            .demandOption(['from', 'to'])
            .epilog('Example: `mintlify rename introduction.mdx overview.mdx`');
    }, function (_a) {
        var from = _a.from, to = _a.to;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, checkForMintJson()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, renameFilesAndUpdateLinksInContent(from, to)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    })
        // Print the help menu when the user enters an invalid command.
        .strictCommands()
        .demandCommand(1, 'Unknown command. See above for the list of supported commands.')
        // Alias option flags --help = -h, --version = -v
        .alias('h', 'help')
        .alias('v', 'version')
        .parse();
};
