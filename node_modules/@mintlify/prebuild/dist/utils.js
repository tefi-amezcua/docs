import SwaggerParser from '@apidevtools/swagger-parser';
import fse from 'fs-extra';
import yaml from 'js-yaml';
import pathUtil from 'path';
export const getFileExtension = (filename) => {
    const parsed = pathUtil.parse(filename);
    return parsed.ext ? parsed.ext.slice(1) : filename;
};
export const openApiCheck = async (path) => {
    let spec;
    let isOpenApi = false;
    try {
        spec = await SwaggerParser.validate(path);
        isOpenApi = true;
    }
    catch (_a) {
        // not valid openApi
    }
    return { spec, isOpenApi };
};
export const filterOutNullInGroup = (group) => {
    const newPages = filterOutNullInPages(group.pages);
    return Object.assign(Object.assign({}, group), { pages: newPages });
};
const filterOutNullInPages = (pages) => {
    if (!Array.isArray(pages)) {
        return [];
    }
    const newPages = [];
    for (const page of pages) {
        if (page == null) {
            continue;
        }
        if (page.hasOwnProperty('pages')) {
            newPages.push(filterOutNullInGroup(page));
            continue;
        }
        newPages.push(page);
    }
    return newPages;
};
export const loadOpenApi = (openApiSrc, openApiString) => {
    // Load yaml
    if (openApiSrc.endsWith('.yaml') || openApiSrc.endsWith('.yml')) {
        return yaml.load(openApiString);
    }
    return JSON.parse(openApiString);
};
export const getConfigPath = async (contentDirectoryPath) => {
    const path = pathUtil.join(contentDirectoryPath, 'mint.json');
    if (!(await fse.pathExists(path)))
        return null;
    return path;
};
export const getConfigObj = async (contentDirectoryPath) => {
    const configPath = await getConfigPath(contentDirectoryPath);
    if (!configPath)
        return null;
    const configContents = await fse.readFile(configPath);
    return await JSON.parse(configContents.toString());
};
