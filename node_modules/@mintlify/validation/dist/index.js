var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { zodToJsonSchema } from 'zod-to-json-schema';
import { MintValidationResults } from './mint-config/common.js';
import { flattenUnionErrorMessages } from './mint-config/flattenUnionErrorMessages.js';
import { configSchema } from './mint-config/schemas/config.js';
import { validateAnchorsWarnings } from './mint-config/validateAnchorsWarnings.js';
import { validateVersionsInNavigation } from './mint-config/validateVersionsInNavigation.js';
export function validateMintConfig(config) {
    var _a;
    var results = new MintValidationResults();
    if (config == null || config == undefined || Object.entries(config).length === 0) {
        results.errors.push('Mint Config object cannot be empty.');
        results.status = 'error';
        return results;
    }
    // Specific warnings and errors
    var validateAnchorsWarningResult = validateAnchorsWarnings(config.anchors, config.navigation);
    var validateVersionsInNavigationResult = validateVersionsInNavigation(config.navigation, (_a = config.versions) !== null && _a !== void 0 ? _a : []);
    results.errors = __spreadArray(__spreadArray([], results.errors, true), validateVersionsInNavigationResult.errors, true);
    results.warnings = __spreadArray(__spreadArray(__spreadArray([], results.warnings, true), validateVersionsInNavigationResult.warnings, true), validateAnchorsWarningResult.warnings, true);
    // Global check
    var validateConfigResult = configSchema.safeParse(config);
    if (validateConfigResult.success == false) {
        var errors = validateConfigResult.error.issues;
        errors.forEach(function (e) {
            var _a;
            var _b;
            if (e.code === 'invalid_union' && ((_b = e.unionErrors) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                (_a = results.errors).push.apply(_a, flattenUnionErrorMessages(e.unionErrors));
            }
            else {
                var message = e.message;
                // Fallback if we forget to set a required_error
                if (message === 'Required') {
                    message = 'Missing required field: ' + e.path.join('.');
                }
                results.errors.push(message);
            }
        });
    }
    results.status = results.errors.length ? 'error' : 'success';
    return results;
}
export * from './openapi/types/endpoint.js';
export { convertOpenAPIV3_1ToEndpoint } from './openapi/convertOpenApi.js';
export { convertSchema } from './openapi/convertSchema.js';
export var mintConfigSchema = (function () {
    var _a, _b, _c, _d, _e, _f;
    var schema = zodToJsonSchema(configSchema, 'Schema');
    (_b = (_a = schema.definitions) === null || _a === void 0 ? void 0 : _a.Schema) === null || _b === void 0 ? true : delete _b.properties.__injected;
    (_d = (_c = schema.definitions) === null || _c === void 0 ? void 0 : _c.Schema) === null || _d === void 0 ? true : delete _d.properties.colors.properties.ultraDark;
    (_f = (_e = schema.definitions) === null || _e === void 0 ? void 0 : _e.Schema) === null || _f === void 0 ? true : delete _f.properties.colors.properties.ultraLight;
    return schema;
})();
