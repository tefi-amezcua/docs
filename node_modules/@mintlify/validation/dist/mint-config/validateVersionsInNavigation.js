import { MintValidationResults } from './common.js';
import { navigationSchema } from './schemas/navigation.js';
export function flattenNavigationVersions(nav, versions) {
    if (versions === void 0) { versions = []; }
    nav.forEach(function (val) {
        if (val == null || typeof val === 'string') {
            return versions;
        }
        if (val.version) {
            versions.push(val.version);
        }
        if (!Array.isArray(val.pages)) {
            return versions;
        }
        return flattenNavigationVersions(val.pages, versions);
    });
    return versions;
}
export function validateVersionsInNavigation(navigation, versions) {
    if (versions === void 0) { versions = []; }
    var results = new MintValidationResults();
    if (navigation == null || !navigationSchema.safeParse(navigation).success) {
        return results;
    }
    var versionsFromNavigation = flattenNavigationVersions(navigation);
    versionsFromNavigation.forEach(function (v) {
        if (versions && !versions.includes(v)) {
            results.errors.push("Version ".concat(v, " is not included in the versions array, but is used in the navigation. Please add ").concat(v, " to the versions array."));
        }
    });
    if (versionsFromNavigation.length === 0 && versions.length > 0) {
        results.warnings.push('You have versions defined in the config, but no versions are used in the navigation.');
    }
    navigation.forEach(function (nav) {
        var _a;
        (_a = results.warnings).push.apply(_a, warnVersionNesting(nav, null));
    });
    return results;
}
function warnVersionNesting(navigation, currentVersion) {
    if (typeof navigation === 'string') {
        return [];
    }
    var warnings = [];
    if (navigation.version && currentVersion != null && navigation.version !== currentVersion) {
        warnings.push("Please do not set versions on groups nested inside a group that already has a version. The group \"".concat(navigation.group, "\" has version \"").concat(navigation.version, "\" set and it is nested in a group that has the version \"").concat(currentVersion, "\" set."));
    }
    if (navigation.pages) {
        return warnings.concat(navigation.pages
            .map(function (entry) { return warnVersionNesting(entry, currentVersion || navigation.version); })
            .flat()
            .filter(Boolean));
    }
    return [];
}
