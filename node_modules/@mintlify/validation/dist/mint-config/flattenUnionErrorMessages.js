var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// TO DO: Write unit tests for this function.
// TO DO: Prettify the output instead of just returning JSON objects.
export function flattenUnionErrorMessages(unionErrors) {
    return unionErrors.reduce(function (acc, unionError) {
        if (Array.isArray(unionError.unionErrors) && unionError.unionErrors.length > 0) {
            return __spreadArray(__spreadArray([], acc, true), flattenUnionErrorMessages(unionError.unionErrors), true);
        }
        return __spreadArray(__spreadArray([], acc, true), [unionError.message], false);
    }, []);
}
