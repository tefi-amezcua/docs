import { InvalidSchemaError } from './convertOpenApi.js';
export var convertSecurity = function (_a) {
    var securityRequirements = _a.securityRequirements, securitySchemes = _a.securitySchemes;
    if (securityRequirements === undefined || securityRequirements.length === 0) {
        return [];
    }
    if (securitySchemes === undefined) {
        throw new InvalidSchemaError(['#', 'components'], 'securitySchemes not defined');
    }
    // TODO(ronan): make this work for camel-case as well
    return securityRequirements.map(function (security) {
        var title = Object.keys(security)
            .map(function (securityName) { return securityName.replace(/[_-]/g, ' '); })
            .join(' & ');
        var parameterSections = {
            title: title,
            query: {},
            header: {},
            cookie: {},
        };
        Object.keys(security).forEach(function (securityName) {
            var securityScheme = securitySchemes === null || securitySchemes === void 0 ? void 0 : securitySchemes[securityName];
            if (securityScheme === undefined) {
                throw new InvalidSchemaError(['#', 'components', 'securitySchemes'], "security scheme not defined: '".concat(securityName, "'"));
            }
            addSecurityParameters({
                securityName: securityName,
                securityScheme: securityScheme,
                parameterSections: parameterSections,
            });
        });
        return parameterSections;
    });
};
export var addSecurityParameters = function (_a) {
    var _b, _c;
    var securityName = _a.securityName, securityScheme = _a.securityScheme, parameterSections = _a.parameterSections;
    switch (securityScheme.type) {
        case 'apiKey':
            if (!['header', 'query', 'cookie'].includes(securityScheme.in)) {
                throw new InvalidSchemaError(['#', 'components', 'securitySchemes', securityName], "invalid security scheme location provided: '".concat(securityScheme.in, "'"));
            }
            var paramGroup = securityScheme.in;
            parameterSections[paramGroup][securityScheme.name] = {
                description: securityScheme.description,
                required: true,
                deprecated: false,
                schema: [
                    {
                        type: 'string',
                        required: true,
                        deprecated: false,
                    },
                ],
            };
            return;
        case 'http':
            if (securityScheme.scheme === 'basic') {
                parameterSections.header['Authentication'] = {
                    description: (_b = securityScheme.description) !== null && _b !== void 0 ? _b : 'Basic authentication header of the form `Basic <encoded-value>`, where `<encoded-value>` is the base64-encoded string `username:password`.',
                    required: true,
                    schema: 'basic',
                    deprecated: false,
                };
            }
            else if (securityScheme.scheme === 'bearer') {
                parameterSections.header['Authorization'] = {
                    description: (_c = securityScheme.description) !== null && _c !== void 0 ? _c : 'Bearer authentication header of the form `Bearer <token>`, where `<token>` is your auth token.',
                    required: true,
                    schema: 'bearer',
                    deprecated: false,
                };
            }
            else {
                throw new InvalidSchemaError(['#', 'components', 'securitySchemes', securityName], "encountered unknown HTTP security scheme: '".concat(securityScheme.scheme, "'"));
            }
            return;
        case 'oauth2':
        case 'openIdConnect':
            return;
    }
};
