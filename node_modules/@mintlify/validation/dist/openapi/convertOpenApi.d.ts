import { OpenAPIV3_1 } from 'openapi-types';
import type { BodySchema, DataSchemaArray, Endpoint, HttpMethod, ResponseSchema } from './types/endpoint.js';
export declare const generateMessage: (path: string[], messages?: string[]) => string;
export declare class InvalidSchemaError extends Error {
    constructor(path: string[], ...messages: string[]);
}
export declare class ImpossibleSchemaError extends Error {
    constructor(path: string[], ...messages: string[]);
}
export declare class ConversionError extends Error {
    constructor(path: string[], ...messages: string[]);
}
export declare const convertBody: (path: string[], body: OpenAPIV3_1.RequestBodyObject | undefined) => BodySchema;
export declare const convertResponses: (path: string[], responses: OpenAPIV3_1.ResponsesObject) => ResponseSchema;
export declare const convertResponse: (path: string[], response: OpenAPIV3_1.ResponseObject) => {
    [contentType: string]: DataSchemaArray;
};
export declare const convertOpenAPIV3_1ToEndpoint: (spec: OpenAPIV3_1.Document, path: string, method: HttpMethod) => Endpoint | undefined;
