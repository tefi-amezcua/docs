export type Endpoint = {
    description?: string;
    path: string;
    method: HttpMethod;
    servers?: Server[];
    request: RequestSchema;
    response: ResponseSchema;
    deprecated: boolean;
};
export type Server = {
    url: string;
    description?: string;
    variables?: {
        [variableName: string]: ServerVariableSchema;
    };
};
export type ServerVariableSchema = ServerVariableStringSchema | ServerVariableStringEnumSchema;
export type ServerVariableStringSchema = {
    type: 'string';
    default: string;
    description?: string;
};
export type ServerVariableStringEnumSchema = {
    type: 'stringEnum';
    enum: string[];
    default: string;
    description?: string;
};
export type HttpMethod = 'get' | 'put' | 'post' | 'delete' | 'options' | 'head' | 'patch' | 'trace';
export type RequestSchema = {
    security: SecurityOption[];
    parameters: ParameterSections;
    body: BodySchema;
};
export type SecurityOption = NonPathParameterSections & {
    title: string;
};
export type BodySchema = {
    [contentType: string]: DataSchemaArray;
};
export type ParameterSchema = {
    required?: boolean;
    description?: string;
    deprecated?: boolean;
    schema: DataSchemaArray | 'basic' | 'bearer';
};
export type PathParameterSchema = ParameterSchema & {
    required: true;
};
export type ParameterGroup = {
    [name: string]: ParameterSchema;
};
export type PathParameterGroup = {
    [name: string]: PathParameterSchema;
};
type NonPathParameterLocations = 'query' | 'header' | 'cookie';
type PathParameterLocations = 'path';
export type ParameterLocations = NonPathParameterLocations | PathParameterLocations;
type NonPathParameterSections = Record<NonPathParameterLocations, ParameterGroup>;
type PathParameterSections = Record<PathParameterLocations, PathParameterGroup>;
export type ParameterSections = NonPathParameterSections & PathParameterSections;
export type ResponseSchema = {
    [code: string]: BodySchema;
};
export type DataSchemaArray = [DataSchema, ...DataSchema[]];
export declare const typeList: readonly ["boolean", "string", "number", "integer", "object", "array", "stringEnum", "numberEnum", "integerEnum", "null", "any"];
export type SchemaType = (typeof typeList)[number];
export type DataSchema = BooleanSchema | StringSchema | NumberSchema | ObjectSchema | ArraySchema | StringEnumSchema | NumberEnumSchema | NullSchema | AnySchema;
export type BaseSchema<T> = {
    type: SchemaType;
    title?: string;
    description?: string;
    default?: T;
    example?: T;
    required?: boolean;
    readOnly?: boolean;
    writeOnly?: boolean;
    deprecated?: boolean;
};
export type BooleanSchema = {
    type: 'boolean';
} & BaseSchema<boolean>;
export type StringSchema = {
    type: 'string';
    format?: string;
    pattern?: string;
    maxLength?: number;
    minLength?: number;
} & BaseSchema<string>;
export type NumberSchema = {
    type: 'number' | 'integer';
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
} & BaseSchema<number>;
export type ObjectSchema = {
    type: 'object';
    additionalProperties?: boolean | DataSchemaArray;
    maxProperties?: number;
    minProperties?: number;
    properties: {
        [key: string]: DataSchemaArray;
    };
} & BaseSchema<object>;
export type ArraySchema = {
    type: 'array';
    items: DataSchemaArray;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
} & BaseSchema<unknown[]>;
export type StringEnumSchema = {
    type: 'stringEnum';
    enum: string[];
} & BaseSchema<string>;
export type NumberEnumSchema = {
    type: 'numberEnum' | 'integerEnum';
    enum: number[];
} & BaseSchema<number>;
export type NullSchema = {
    type: 'null';
} & BaseSchema<null>;
export type AnySchema = {
    type: 'any';
} & BaseSchema<unknown>;
export {};
