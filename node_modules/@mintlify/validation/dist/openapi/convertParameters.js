var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { InvalidSchemaError } from './convertOpenApi.js';
import { convertSchema, copyKeyIfDefined } from './convertSchema.js';
export var convertParameters = function (_a) {
    var path = _a.path, method = _a.method, pathParameters = _a.pathParameters, operationParameters = _a.operationParameters;
    var parameterSections = {
        path: {},
        query: {},
        header: {},
        cookie: {},
    };
    pathParameters === null || pathParameters === void 0 ? void 0 : pathParameters.forEach(function (parameterObject, i) {
        addParameter({
            path: __spreadArray(__spreadArray([], path, true), ['parameters', i.toString()], false),
            parameter: parameterObject,
            parameterSections: parameterSections,
        });
    });
    operationParameters === null || operationParameters === void 0 ? void 0 : operationParameters.forEach(function (parameterObject, i) {
        addParameter({
            path: __spreadArray(__spreadArray([], path, true), [method, 'parameters', i.toString()], false),
            parameter: parameterObject,
            parameterSections: parameterSections,
        });
    });
    return parameterSections;
};
var addParameter = function (_a) {
    var path = _a.path, parameter = _a.parameter, parameterSections = _a.parameterSections;
    if (!['path', 'header', 'query', 'cookie'].includes(parameter.in)) {
        throw new InvalidSchemaError(path, "invalid parameter location: '".concat(parameter.in, "'"));
    }
    var location = parameter.in;
    if (location === 'path') {
        var newParameter = {
            required: true,
            schema: convertSchema(__spreadArray(__spreadArray([], path, true), ['schema'], false), parameter.schema, true),
        };
        copyKeyIfDefined('description', parameter, newParameter);
        copyKeyIfDefined('deprecated', parameter, newParameter);
        parameterSections.path[parameter.name] = newParameter;
    }
    else {
        var newParameter = {
            schema: convertSchema(__spreadArray(__spreadArray([], path, true), ['schema'], false), parameter.schema, true),
        };
        copyKeyIfDefined('description', parameter, newParameter);
        copyKeyIfDefined('deprecated', parameter, newParameter);
        copyKeyIfDefined('required', parameter, newParameter);
        parameterSections[location][parameter.name] = newParameter;
    }
};
